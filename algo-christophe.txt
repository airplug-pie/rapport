** Initialisation
bd_abos <- creer_bd()
// bd_messages <- creer_bd() On ne garde plus un historique des messages non ?
bd_offres_abo <- creer_bd()
bd_demandes_abo <- creer_bd()
demarrer_timer_heartbeat()
TTL <- à définir //Time To Live. Nombre de saut possible parmi des voitures n'ayant aucun voisin intéressé par l'abonnement
TTS <- à définir //Time To Survive. Nombre de saut possible parmi des voitures ayant un voisin intéressé par l'abonnement

** Heartbeat déclenché
bd_offres_abo.nettoyer()	// supprimer les vieilles offres
bd_demandes_abo.nettoyer()	// supprimer les vieilles demandes
offres <- bd_offres_abo.liste() + bd_offres_abo.aleatoire() // Récupération d'une liste des offres les plus importantes + une offre aléatoire
demandes <- bd_demandes_abo.liste() + bd_demandes_abo.aleatoire() // de même avec les demandes d'abonnements
envoyer([heartbeat] offres, demandes)

** Réception message heartbeat
recevoir([heartbeat] offres, demandes)
bd_offres_abo.mise_a_jour(offres) // On met à jour les priorités des offres
bd_demandes_abo.mise_a_jour(demandes) // de même avec les demandes.

** Rédaction message par l'utilisateur
date <- date_courante()
envoyer([PIE] auteur, date, message, TTL, TTS)

** Réception message PIE
recevoir([PIE] auteur, date, message, TTL_msg, TTS_msg)
si bd_abos.contient(auteur) alors
	bd_messages.ajouter(auteur, date, message)
	// affichage du message à l'utilisateur
finsi
si bd_demandes_abo.voisins_interesses(auteur) et  alors
	TTS_msg <- TTS_msg - 1
	si TTS_msg > 0 alors
		envoyer([PIE] auteur, date, message, TTL_msg, TTS_msg)
	finsi
sinon
	TTL_msg <- TTL_msg - 1
	si TTL_msg > 0 alors
		envoyer([PIE] auteur, date, message, TTL, TTS)
	finsi
finsi

