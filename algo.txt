** Initialisation

bd_abos <- creer_bd()
bd_offres_abo <- creer_bd()
bd_demandes_abo <- creer_bd()
bd_flux <- creer_bd() // flux affiché à l'utilisateur
demarrer_timer_heartbeat()


** Abonnement à un utilisateur U

bd_abos.ajouter(U)

// La demande a la priorité la plus haute
bd_demandes_abo.ajouter(U, 0)


** Heartbeat déclenché

bd_offres_abo.nettoyer()		// suppr. des offres obsolètes
bd_demandes_abo.nettoyer()	// suppr. des demandes obsolètes

// Récupération d'une liste des offres les plus importantes
// + des offres choisies aléatoirement pour compléter
offres <- bd_offres_abo.liste_heartbeat()

// De même avec les demandes d'abonnements
demandes <- bd_demandes_abo.liste_heartbeat()

envoyer([heartbeat] offres, demandes)


** Réception du message heartbeat

recevoir([heartbeat] offres, demandes)

// Mise à jour des priorités
bd_offres_abo.mise_a_jour(offres)
bd_demandes_abo.mise_a_jour(demandes)


** Rédaction d'un message par l'utilisateur

auteur <- nom_utilisateur()
date <- date_courante()
msg <- message_redige()
id_msg <- creer_message(auteur, date, msg)

bd_flux.ajouter(id_msg, auteur, date, msg)
ihm.rafraichir()

// Time To Live
// Nombre de sauts possibles parmi des voitures
// n'ayant aucun voisin intéressé par l'abonnement
TTL <- à définir

// Time To Survive
// Nombre de sauts possibles parmi des voitures
// ayant un voisin intéressé par l'abonnement
TTS <- à définir 

envoyer([PIE] id_msg, auteur, date, msg, TTL, TTS)


** Réception d'un message PIE

recevoir([PIE] id_msg, auteur, date, msg, TTL, TTS)

si bd_abos.contient(auteur)
		et non bd_flux.contient(id_msg)
alors
	bd_flux.ajouter(id_msg, auteur, date, msg)
	ihm.rafraichir()
finsi

si bd_demandes_abo.voisins_interesses(auteur) alors
	TTS <- TTS - 1
	si TTS > 0 alors
		envoyer([PIE] auteur, date, msg, TTL, TTS)
	finsi
sinon
	TTL <- TTL - 1
	si TTL > 0 alors
		envoyer([PIE] auteur, date, msg, TTL, TTS)
	finsi
finsi

